/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package sentimentanalysis;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author TOSHIBA
 */
public class SentimentJFrame extends javax.swing.JInternalFrame {

    /**
     * Creates new form SentimentJFrame
     */
    database db=new database();
    public SentimentJFrame() {
        initComponents();
        
//        File file = new File("C:\\Users\\TOSHIBA\\Documents\\NetBeansProjects\\SentimentAnalysis\\customer review data\\main.txt");
//        double frwrd1=countWordphrace("this is",file);
//        
        
       
        String sl="select * from tbl_domain";
         comb_domain.addItem("--select--");
        ResultSet rs=db.select(sl);
        try {
            while (rs.next()) {
                
                comb_domain.addItem(rs.getString(2));

            }
        } catch (SQLException ex) {
            Logger.getLogger(SentimentJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bt_submit = new javax.swing.JButton();
        butcancel = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        comb_domain = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        bt_submit.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        bt_submit.setText("Submit");
        bt_submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_submitActionPerformed(evt);
            }
        });

        butcancel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        butcancel.setText("Cancel");
        butcancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butcancelActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setText("Dictionary Registration");

        comb_domain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comb_domainActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("domains");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(comb_domain, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(bt_submit, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(butcancel, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(115, 115, 115))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comb_domain, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bt_submit, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(butcancel, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(109, 109, 109))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bt_submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_submitActionPerformed
        // TODO add your handling code here:
     String stmesage=comb_domain.getSelectedItem().toString();
   
  if(stmesage.equalsIgnoreCase("--select--"))
  {
       JOptionPane.showMessageDialog(this,"select file...!!!");
  }
  else
  {
     String filepath=null;
     int domainid=0;
     
       String sl="select * from tbl_domain where domainname='"+stmesage+"' ";
       
        ResultSet rs=db.select(sl);
        try {
            while (rs.next()) {
                
             filepath=   rs.getString("path");
             domainid=   rs.getInt("id");

            }
        } catch (SQLException ex) {
            Logger.getLogger(SentimentJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } 
        
        
//        
  if(filepath!=null)
  {
//    
        System.out.println("Dataset");
        System.out.println("********");
        String realtext="";
        System.out.println(":::::"+filepath.replace("//", "\\"));
        readintomain1(filepath);
        try (BufferedReader br = new BufferedReader(new FileReader("C:\\Users\\TOSHIBA\\Documents\\NetBeansProjects\\SentimentAnalysis\\customer review data\\main1.txt")))
		{

			String sCurrentLine,sCurrentLine1="";

			while ((sCurrentLine = br.readLine()) != null) {
                        
                          
                        
                        
                           int start=sCurrentLine.indexOf("##")+2;
                           int stop=sCurrentLine.lastIndexOf(".");
                            
                            
                            if(stop < start)
                            {
                                System.out.println("----"+start);  
                                 System.out.println("----"+stop);
                                continue;
                            }
                          String state = sCurrentLine.substring(start,stop);
	                  
                          realtext=realtext+""+state+"\n";
                          
                          
                          
                          
			}

		} catch (Exception e) {

		} 
        
        try {

			String content = realtext;

			File file = new File("C:\\Users\\TOSHIBA\\Documents\\NetBeansProjects\\SentimentAnalysis\\customer review data\\main.txt");

			// if file doesnt exists, then create it
			if (!file.exists()) {
				file.createNewFile();
			}

			FileWriter fw = new FileWriter(file.getAbsoluteFile());
			BufferedWriter bw = new BufferedWriter(fw);
			bw.write(content);
			bw.close();

			

		} catch (IOException e) {
			e.printStackTrace();
		}
//        
//        //Dictonary comparison...
//        
//      
         System.out.println("phrase Dictonary ");
        System.out.println("*******************");
       File file=new File("C:\\Users\\TOSHIBA\\Documents\\NetBeansProjects\\SentimentAnalysis\\customer review data\\main.txt");
       double totalnowords=totalnumber(file);
       System.out.println(".................."+totalnowords);
       try (BufferedReader br = new BufferedReader(new FileReader("C:\\Users\\TOSHIBA\\Documents\\NetBeansProjects\\SentimentAnalysis\\customer review data\\main.txt")))
		{

			String sCurrentLine;

		while((sCurrentLine = br.readLine()) != null) 
                        {
                            
                             System.out.println("-----"+sCurrentLine);
                             String[] word=sCurrentLine.split(" ");
                              
                             for(int i=0;i<word.length;i++)
                             {
                                
                                 System.out.println("------------"+word[i]); 
                                 try
                                   {
                                    double single=countWord(word[i], file);
                                    double  scr=single/totalnowords;
                                    if(word[i].equalsIgnoreCase("."))
                                    {
                                        
                                    }
                                    else
                                    {
                                      if(word[i].equals(""))
                                      {
                                          
                                      }else{
                                      String in1="insert into phrase_dictonary(d_word,d_score,d_domain_id) values('"+word[i]+"',"+scr+","+domainid+")";
                                      boolean s= db.insert(in1); 
                                      }
                                    }
                                   }catch(Exception e)
                                   {
                                    System.out.println("sssss::::"+e);   
                                   }
                                 if(i>(int)0)
                                 {
                                     
                                  double frwrd1=countWord(word[i],file);
                                  double frwrd0=countWord(word[i-1],file);
                                   System.out.println(" frequncy of word:"+i+"---"+frwrd1);
                                    System.out.println(" frequncy of word:"+(i-1)+"----"+frwrd0);
                                   
                                  String combinedword=word[i-1]+" "+word[i];
                                  
                                  double frcombined=countWordphrace(combinedword,file); 
                                  System.out.println(" frequncy of combined word:"+frcombined);
                                  double Score=(frcombined)/(frwrd0*frwrd1);
                                  System.out.println("score::"+Score);
                                    if(combinedword.contentEquals(" . "))
                                    {
                                        
                                    }
                                    else
                                    {
                                        if(combinedword.equals(""))
                                      {
                                          
                                      }else{
                                         String in="insert into phrase_dictonary(d_word,d_score,d_domain_id) values('"+combinedword+"',"+Score+","+domainid+")";
                                          boolean s1= db.insert(in); }
                                    }
                                 }
                                 
                             
                                 
                             }
                             
                             
   
			}

		} catch (Exception e) {

		} 
//        
        
        
        
        }
          else
         {
               JOptionPane.showMessageDialog(this,"Domain Not found...!!!");
         }
        
  }  
         
//        String in="insert into tbl_review(comment) values('"+txt+"')";
//        
//    boolean s= d.insert(in);
//            if(s)
//            {
//                JOptionPane.showMessageDialog(this,"inserted");
//            }
//            else
//            {
//               JOptionPane.showMessageDialog(this,"not inserted"); 
//            }
    
     
    
    
    }//GEN-LAST:event_bt_submitActionPerformed

     void readintomain1(String filepath)
   {
       String realtext="";
         try (BufferedReader br2 = new BufferedReader(new FileReader(filepath)))
		{

			String sCurrentLine,sCurrentLine1="";

			while ((sCurrentLine = br2.readLine()) != null)
                        {
                           sCurrentLine = sCurrentLine.replace("!",".");
                            sCurrentLine = sCurrentLine.replace("?",".");
                           if(sCurrentLine.contains("##") && sCurrentLine.contains(".") )
                           {
                           int start=sCurrentLine.indexOf("##");
                           int stop=sCurrentLine.lastIndexOf(".")+1;
                         
//                            System.out.println("index----"+start);  
//                             System.out.println("index----"+stop);
                            if(stop < start)
                            {
//                                System.out.println("----"+start);  
//                                 System.out.println("----"+stop);
                                continue;
                            }
                          String state = sCurrentLine.substring(start,stop);
	                  
                              System.out.println("....."+state);  
                        
                           
                          state = state.replace(","," . \n##");
	                  state = state.replace("("," . \n##");
                          state = state.replace(")"," . \n##"); 
                          state = state.replace(":"," . \n##");
                          state = state.replace(";"," . \n##");
                          state = state.replace("["," . \n##");
                          state = state.replace("]"," . \n##");
                          state = state.replace("-"," "); 
                          state = state.replace("/"," ");
                          state = state.replace("*"," ");
                          state = state.replace("+"," ");
                          state = state.replace("&"," ");
                          state = state.replace("_"," ");
                          state = state.replace("@"," ");
                          state = state.replace("<"," ");
                          state = state.replace(">"," ");
                          state = state.replace("$"," ");
                          
                          
                        //  state = state.replace("!"," . \n##");
                         // realtext=realtext+""+state+"\n";
                          if(state.equals(" ") && state.equalsIgnoreCase("##"))
                          {
                          }
                          else{
                          realtext=realtext+""+state+"\n";
                          }
                         }
                    }  
                          
                          
			
                        

		} catch (Exception e) {

		} 
                        
        
        try {

			String content = realtext;

			File file = new File("C:\\Users\\TOSHIBA\\Documents\\NetBeansProjects\\SentimentAnalysis\\customer review data\\main1.txt");

			// if file doesnt exists, then create it
			if (!file.exists()) 
                        {
				file.createNewFile();
			}
			FileWriter fw = new FileWriter(file.getAbsoluteFile());
			BufferedWriter bw = new BufferedWriter(fw);
			bw.write(content);
			bw.close();

			

		} catch (IOException e) {
			e.printStackTrace();
		}
   }
    public int countWord(String word, File file) {
         int count = 0;
        try {
           
            Scanner scanner = new Scanner(file);
            while (scanner.hasNextLine()) {
                String nextToken = scanner.next();
               
                if (nextToken.equalsIgnoreCase(word))
                    count++;
            }
            
        } catch (Exception ex) {
            System.out.println("@@@@@@@@@@"+ex);
        }
        return count;
}
     public int totalnumber(File file) {
         int count = 0;
  
       BufferedReader br=null;
       try { 
              br=new BufferedReader(new FileReader("C:\\Users\\TOSHIBA\\Documents\\NetBeansProjects\\SentimentAnalysis\\customer review data\\main.txt"));
              String line=br.readLine();
              int totword=0;
              while(line!=null)
              {
                  String a[]=line.split(" ");
                  for(int i=0;i<a.length;i++)
                  { 
                      if(a[i].length()>0) 
                          totword+=1; 
                  } 
                  line=br.readLine();
              }
             // System.out.print("Total number of words"+totword);
              count=totword;   
              br.close(); 
       } catch(Exception e)
       { e.printStackTrace();
       System.out.println("error"+e.getMessage()); 
       }

        
        return count;
}
    
     public int countWordphrace(String word, File file) {
         int count = 0;
         try
         {
       final Scanner scanner = new Scanner(file);
       while (scanner.hasNextLine()) {
       final String lineFromFile = scanner.nextLine();
       if(lineFromFile.contains(word)) { 
       // a match!
                   count++;
      
                }
           }
         }catch(Exception e)
         {
         
         }
        return count;
}
    
    private void butcancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butcancelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_butcancelActionPerformed

    private void comb_domainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comb_domainActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comb_domainActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SentimentJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SentimentJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SentimentJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SentimentJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SentimentJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_submit;
    private javax.swing.JButton butcancel;
    private javax.swing.JComboBox comb_domain;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables

}