/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package sentimentanalysis;

import java.awt.Frame;
import java.io.File;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.Normalizer;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.accessibility.AccessibleText;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author TOSHIBA
 */
public class sentanceSum extends JFrame {

    double sumof=0.0;
    String realstring="";
    String realstatus="";
    String realvalue="";
    /**
     * Creates new form sentanceSum
     */
     String htmlcontent="<html><body>";
    database db=new database();
    public sentanceSum() {
        initComponents();
        
        String sl="select * from tbl_domain";
         combo_domain.addItem("--select--");
        ResultSet rs=db.select(sl);
        try {
            while (rs.next()) {
                
                combo_domain.addItem(rs.getString(2));

            }
        } catch (SQLException ex) {
            Logger.getLogger(SentimentJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } 
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txt_sentence = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        bt_submit = new javax.swing.JButton();
        bt_cancel = new javax.swing.JButton();
        combo_domain = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txt_sentence.setColumns(20);
        txt_sentence.setRows(5);
        jScrollPane1.setViewportView(txt_sentence);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("Sentence Entry");

        bt_submit.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        bt_submit.setText("Submit");
        bt_submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_submitActionPerformed(evt);
            }
        });

        bt_cancel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        bt_cancel.setText("Cancel");
        bt_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_cancelActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel2.setText("Domain");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel3.setText("Enter Sentence");

        jLabel4.setForeground(new java.awt.Color(255, 0, 0));
        jLabel4.setText("End with space dot. ( eg. this is good . )");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bt_submit, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(bt_cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(combo_domain, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)))
                .addGap(0, 49, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(194, 194, 194)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jLabel4)))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                    .addComponent(combo_domain))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bt_submit, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bt_cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bt_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_cancelActionPerformed
        // TODO add your handling code here:
       sumof=0.0;
         realstring="";
        realstatus="";
       realvalue="";
    /**
     * Creates new form sentanceSum
     */
     htmlcontent="<html><body>"; 
       combo_domain.setSelectedIndex(0);
       txt_sentence.setText("");
        
    }//GEN-LAST:event_bt_cancelActionPerformed

    private void bt_submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_submitActionPerformed
        
            // TODO add your handling code here:
            
            
            String text1=txt_sentence.getText().toString().replace(".",":");
            
            String[] text=text1.split(":");
            
            String stmesage=combo_domain.getSelectedItem().toString();
            for(int l=0;l<text.length;l++)
            {
                htmlcontent=htmlcontent+"<center><table border=2>";
                sumof=0.0;
                realstring="";
                realstatus="";
                realvalue="";
                
                htmlcontent=htmlcontent+"<tr><td>Sentance"+l+"</td></tr>";
                if(text[l].equals(""))
                {
                    JOptionPane.showMessageDialog(this,"Enter the text....!!!");
                }
                else
                {
                    if(stmesage.equalsIgnoreCase("--select--"))
                    {
                        JOptionPane.showMessageDialog(this,"select file...!!!");
                    }
                    else
                    {
                        
                        
                        int id=getid(stmesage);
                        double sum=0;
                        double temp=0;
                        String sumline="";
                        String sumvalue="";
                        String word[]=text[l].split(" ");
                        
                        double s1=scorevalue(id,word[0]);
                        
                        System.out.println("----"+word[0]+"---"+s1);
                        sumvalue=sumvalue+","+s1;
                        sum=sum+s1;
                        
                        for(int i=1;i<word.length;i++)
                        {
                            double s2=scorevalue(id,word[i]);
                            System.out.println(""+word[i]+"---"+s2);
                            sum=sum+s2;
                            
                            
                        }
                        
                        System.out.println("single sum::"+sum);
                        
                        
                        
                        if(sum>temp)
                        {
                            temp=sum;
                            sumline=sumline+","+word[0];
                            for(int i=1;i<word.length;i++)
                            {
                                sumline=sumline+","+word[i];
                                
                                double s2=scorevalue(id,word[i]);
                                sumvalue=sumvalue+","+s2;
                                
                            }
                            sentancecheking(sumline,sumvalue,temp);
                        }
                        int b=word.length;
                        for(int n=word.length;n>1;n--)
                        {
                            System.out.println("*********fulldata************   "+n);
                            sum=0;
                            
                            for(int j=0;j<b;j++)
                            {
                                
                                if(word[j].equalsIgnoreCase(word[n-2]))
                                {
                                    // System.out.println(""+word[n-2]);
                                }
                                else if(word[j].equalsIgnoreCase(word[n-1]))
                                {
                                    //System.out.println(""+word[n-1]);
                                }
                                else
                                {
                                    try
                                    {
                                        double s2=scorevalue(id,word[j]);
                                        System.out.println(""+word[j]+"----"+s2);
                                        sum=sum+s2;
                                    }
                                    catch(Exception e)
                                    {
                                        System.out.println("-----"+e);
                                    }
                                }
                                
                            }
                            String combword=word[n-2]+" "+word[n-1];
                            double s3=scorevalue(id,combword);
                            System.out.println(""+combword+"----"+s3);
                            sum=sum+s3;
                            System.out.println("sum:******************************:"+sum);
//
                            
                            temp=sum;
                            sumline="";
                            sumvalue="";
                            for(int j=0;j<b;j++)
                            {
                                
                                if(word[j].equalsIgnoreCase(word[n-2]))
                                {
                                    //  System.out.println(""+word[n-2]);
                                }
                                else if(word[j].equalsIgnoreCase(word[n-1]))
                                {
                                    //System.out.println(""+word[n-1]);
                                }
                                else
                                {
                                    try
                                    {
                                        sumline=sumline+","+word[j];
                                        
                                        double s2=scorevalue(id,word[j]);
                                        sumvalue=sumvalue+","+s2;
                                        System.out.println(""+word[j]+"----"+s2);
                                        sum=sum+s2;
                                    }
                                    catch(Exception e)
                                    {
                                        System.out.println("-----"+e);
                                    }
                                }
                                
                            }
                            String combword1=word[n-2]+" "+word[n-1];
                            double s4=scorevalue(id,combword);
                            sumline=sumline+","+combword1;
                            sumvalue=sumvalue+","+s4;
                            sentancecheking(sumline,sumvalue,temp);
                            
                            
                        }
                        
                        
                        htmlcontent=htmlcontent+"</table></center>";
                        htmlcontent=htmlcontent+"<center><table><tr><td>Top score</td></tr>";
                        realcreation();
                        htmlcontent=htmlcontent+"</table></center>";
                        
                        
                        
                        
                        
                        
                        
                        
                    }
                    
                    
                }
            }
            
            String cou="select count(*) from tbl_sentance ";
            float total=0;
            ResultSet rs=db.select(cou);
            try
            {
            while (rs.next()) 
            {
                total=rs.getFloat("count(*)");
                
            }
            }catch(Exception e)
            {
                
            }
             String co="select count(*) from tbl_sentance where s_polarity='positive'";
            float top=0;
            ResultSet rs1=db.select(co);
            try
            {
            while (rs1.next()) 
            {
                top=rs1.getFloat("count(*)");
                
            }
            }catch(Exception e)
            {
                
            }
             String cont="select count(*) from tbl_sentance where s_polarity='negative'";
            float ton=0;
            ResultSet rs4=db.select(cont);
            try
            {
            while (rs4.next()) 
            {
                ton=rs4.getFloat("count(*)");
                
            }
            }catch(Exception e)
            {
                
            }
            float positive=(top/total)*100;
            float nu=total-(top+ton);
            float negative=(ton/total)*100;
            float nutral=(nu/total)*100;
            htmlcontent=htmlcontent+"MAIN GRAPH<br><table><tr ><div bgcolor=red width="+positive+"></div>"+positive+"%</tr>"
                    + "<tr><div bgcolor=blue width="+negative+"></div>"+negative+"%</tr>"
                    +"<tr><div bgcolor=green width="+nutral+"></div>"+nutral+"%</tr>"
                    + "</table>";
            String cu="select count(*)  from tbl_sentance  where s_polarity <> 'Neutral'";
            float nutotal=0;
            ResultSet rsq=db.select(cu);
            try
            {
            while (rsq.next()) 
            {
                nutotal=rsq.getFloat("count(*)");
                
            }
            }catch(Exception e)
            {
                
            }
            float positiv=(top/nutotal)*100;
            float negativ=(ton/nutotal)*100;
             htmlcontent=htmlcontent+"MAIN GRAPH-1<br><table><tr ><div bgcolor=red width="+positiv+"></div>"+positiv+"%</tr>"
                    + "<tr><div bgcolor=blue width="+negativ+"></div>"+negativ+"%</tr>"
                    + "</table>";
            htmlcontent=htmlcontent+"<center><table><tr><td bgcolor=red></td><td>positive</td></tr>"
                    + "<tr><td bgcolor=green></td><td>Neutral</td></tr>"
                    + "<tr><td bgcolor=blue></td><td>Negative</td></tr></table></center></body></html>";
            graphicalview g=new graphicalview();
            
            g.setVisible(true);
            g.setdatavalue(htmlcontent);
     
    }//GEN-LAST:event_bt_submitActionPerformed
public void sentancecheking(String sumline,String sumvalue,double temp)
{   
     if(sumof<temp)
     {
        sumof=temp; 
        realstring=sumline;
        realvalue=sumvalue;
        
        String tr="truncate tbl_score"; 
          
            boolean btr=db.insert(tr);
           
           System.out.println("temp value "+temp); 
           System.out.println("sentance "+sumline);
           System.out.println("sentance "+sumvalue);
         String wordarray[]=sumline.split(",");
         String value[]=sumvalue.split(",");
      
         int necount=0;
         int pcount=0;
         int nucount=0;
         htmlcontent=htmlcontent+"<tr>";
        for(int j=1;j<value.length;j++)
        {
            String polarity="";
             String clr="white";
              
             try {
                 String sel="select * from polarity_dictionary where p_word='"+wordarray[j]+"'";
                 ResultSet rs=db.select(sel);
                 if (rs.next()) {
                    
                     
                    polarity=rs.getString("p_polarity");
               
                    if(polarity.equalsIgnoreCase("Positive"))
                    {
                        clr="red";
                        pcount=pcount+1;
                    }
                   
                    if(polarity.equalsIgnoreCase("Neutral"))
                    {
                        clr="green";
                        nucount=nucount+1;
                    }
                   if(polarity.equalsIgnoreCase("Negative"))
                    {
                        clr="blue";
                        necount=necount+1;
                    }
                    
                    
                 }
              
             } catch (Exception ex) {
                 Logger.getLogger(sentanceSum.class.getName()).log(Level.SEVERE, null, ex);
             }
            String ins="insert into tbl_score(s_word,s_score,polarity) values('"+wordarray[j]+"','"+value[j]+"','"+polarity+"')"; 
          
            boolean bs=db.insert(ins);
          htmlcontent=htmlcontent+"<td bgcolor="+clr+">"+wordarray[j]+"</td>"; 
         //  the camera has a wonderful set of features .
        }
        htmlcontent=htmlcontent+"<td>"+temp+"</td>";
            if(pcount>necount && pcount>nucount)
            {
//                JOptionPane.showMessageDialog(this, "the sentance positive");
                htmlcontent=htmlcontent+"<td>positive</td></tr>";
                realstatus="positive";
            }
            else  if(necount>pcount && necount>nucount)
            {
//                JOptionPane.showMessageDialog(this, "the sentance negative");
                htmlcontent=htmlcontent+"<td>negative</td></tr>";
                realstatus="negative";
            }
            else if(nucount>necount && nucount>pcount)
            {
                 if(pcount!=0 && necount!=0 && pcount==necount)
                {
//                    JOptionPane.showMessageDialog(this, "the sentance positive.!!");
                   htmlcontent=htmlcontent+"<td>negative</td></tr>";
                   realstatus="negative";
                }
                 else
                if(pcount>necount)
                {
//                    JOptionPane.showMessageDialog(this, "the sentance positive.!!");
                   htmlcontent=htmlcontent+"<td>positive</td></tr>";
                   realstatus="positive";
                }
                else  if(pcount==0 && necount==0)
               {
//                    JOptionPane.showMessageDialog(this, "the sentance neutral.!!");
               htmlcontent=htmlcontent+"<td>Nutral</td></tr>";
               realstatus="neutral";
               }
                else {
//                    JOptionPane.showMessageDialog(this, "the sentance negative.!!");
                htmlcontent=htmlcontent+"<td>negative</td></tr>";
                realstatus="negative";
                }
              
            }
        
     }
      else
     {
       String tr="truncate tbl_score"; 
          
            boolean btr=db.insert(tr);
           
           System.out.println("temp value "+temp); 
           System.out.println("sentance "+sumline);
           System.out.println("sentance "+sumvalue);
         String wordarray[]=sumline.split(",");
         String value[]=sumvalue.split(",");
      
         int necount=0;
         int pcount=0;
         int nucount=0;
         htmlcontent=htmlcontent+"<tr>";
        for(int j=1;j<value.length;j++)
        {
            String polarity="";
             String clr="white";
              
             try {
                 String sel="select * from polarity_dictionary where p_word='"+wordarray[j]+"'";
                 ResultSet rs=db.select(sel);
                 if (rs.next()) {
                    
                     
                    polarity=rs.getString("p_polarity");
               
                    if(polarity.equalsIgnoreCase("Positive"))
                    {
                        clr="red";
                        pcount=pcount+1;
                    }
                   
                    if(polarity.equalsIgnoreCase("Neutral"))
                    {
                        clr="green";
                        nucount=nucount+1;
                    }
                   if(polarity.equalsIgnoreCase("Negative"))
                    {
                        clr="blue";
                        necount=necount+1;
                    }
                    
                    
                 }
              
             } catch (Exception ex) {
                 Logger.getLogger(sentanceSum.class.getName()).log(Level.SEVERE, null, ex);
             }
            String ins="insert into tbl_score(s_word,s_score,polarity) values('"+wordarray[j]+"','"+value[j]+"','"+polarity+"')"; 
          
            boolean bs=db.insert(ins);
          htmlcontent=htmlcontent+"<td bgcolor="+clr+">"+wordarray[j]+"</td>"; 
         //  the camera has a wonderful set of features .
        }
        htmlcontent=htmlcontent+"<td>"+temp+"</td>";
            if(pcount>necount && pcount>nucount)
            {
//                JOptionPane.showMessageDialog(this, "the sentance positive");
                htmlcontent=htmlcontent+"<td>positive</td></tr>";
            }
            else if(necount>pcount && necount>nucount)
            {
//                JOptionPane.showMessageDialog(this, "the sentance negative");
                htmlcontent=htmlcontent+"<td>negative</td></tr>";
            }
            else if(nucount>necount && nucount>pcount)
            {
                if(pcount!=0 && necount!=0 && pcount==necount)
                {
//                    JOptionPane.showMessageDialog(this, "the sentance positive.!!");
                   htmlcontent=htmlcontent+"<td>negative</td></tr>";
                   realstatus="negative";
                }
                else
                if(pcount>necount)
                {
//                    JOptionPane.showMessageDialog(this, "the sentance positive.!!");
                   htmlcontent=htmlcontent+"<td>positive</td></tr>";
                }
                else  if(pcount==0 && necount==0)
               {
//                    JOptionPane.showMessageDialog(this, "the sentance neutral.!!");
               htmlcontent=htmlcontent+"<td>Nutral</td></tr>";
               realstatus="neutral";
               }
                else {
//                    JOptionPane.showMessageDialog(this, "the sentance negative.!!");
                htmlcontent=htmlcontent+"<td>negative</td></tr>";
                realstatus="negative";
                }
            
            }
     } 
        
}
    

public void realcreation()
{
       
         String wordarray[]=realstring.split(",");
         String value[]=realvalue.split(",");
      
         String sentance="";
         String polar="";
         
         int necount=0;
         int pcount=0;
         int nucount=0;
         htmlcontent=htmlcontent+"<tr>";
        for(int j=1;j<value.length;j++)
        {
            String polarity="";
             String clr="white";
              
             try {
                 String sel="select * from polarity_dictionary where p_word='"+wordarray[j]+"'";
                 ResultSet rs=db.select(sel);
                 if (rs.next()) {
                    
                     
                    polarity=rs.getString("p_polarity");
               
                    if(polarity.equalsIgnoreCase("Positive"))
                    {
                        clr="red";
                        pcount=pcount+1;
                    }
                   
                    if(polarity.equalsIgnoreCase("Neutral"))
                    {
                        clr="green";
                        nucount=nucount+1;
                    }
                   if(polarity.equalsIgnoreCase("Negative"))
                    {
                        clr="blue";
                        necount=necount+1;
                    }
                    
                    
                 }
              
             } catch (Exception ex) {
                 Logger.getLogger(sentanceSum.class.getName()).log(Level.SEVERE, null, ex);
             }
         sentance=sentance+" "+wordarray[j];
          htmlcontent=htmlcontent+"<td bgcolor="+clr+">"+wordarray[j]+"</td>"; 
         //  the camera has a wonderful set of features .
        }
        htmlcontent=htmlcontent+"<td>"+sumof+"</td>";
            if(pcount>necount && pcount>nucount)
            {
                polar="positive";
//                JOptionPane.showMessageDialog(this, "the sentance positive");
                htmlcontent=htmlcontent+"<td>positive</td></tr>";
            }
           else if(necount>pcount && necount>nucount)
            {
//                JOptionPane.showMessageDialog(this, "the sentance negative");
                polar="negative";
                htmlcontent=htmlcontent+"<td>negative</td></tr>";
            }
           else if(nucount>necount && nucount>pcount)
            {
                if(pcount!=0 && necount!=0 && pcount==necount)
                {
//                    JOptionPane.showMessageDialog(this, "the sentance positive.!!");
                   polar="negative";
                   htmlcontent=htmlcontent+"<td>negative</td></tr>";
                   realstatus="negative";
                }
                else
                if(pcount>necount)
                {
//                    JOptionPane.showMessageDialog(this, "the sentance positive.!!");
                   polar="positive";
                    htmlcontent=htmlcontent+"<td>positive</td></tr>";
                }
               else  if(pcount==0 && necount==0)
               {
//                    JOptionPane.showMessageDialog(this, "the sentance neutral.!!");
               polar="Neutral";
                   htmlcontent=htmlcontent+"<td>Nutral</td></tr>";
               realstatus="neutral";
               }
                else {
//                    JOptionPane.showMessageDialog(this, "the sentance negative.!!");
                polar="negative";
                   htmlcontent=htmlcontent+"<td>negative</td></tr>";
                realstatus="negative";
                }
            
            }
//      
        String ins="insert into tbl_sentance(s_sentance,s_polarity) values('"+sentance+"','"+polar+"')";
        if(db.insert(ins))
        {
            System.out.println("sucesss"); 
        }
     
}
    public double  roundvalue(double d)
    {
        
         double ds=Math.round(d*10.00)/100.0;
        return ds;
    }
  public double scorevalue(int id,String text) {
       double score =0;  
      
      try {
           
            String selectdata="select distinct  d_word,d_score from phrase_dictonary where d_domain_id="+id+"";
            ResultSet rs=db.select(selectdata);
            while (rs.next()) 
            {
                
               String str=rs.getString("d_word").toString();
               
               if(text.equalsIgnoreCase(str))
               {
                   score=rs.getDouble("d_score");
                  
               }
                
            }
            
            
            
            
            
        } catch (Exception ex) {
            System.out.println(""+ex);
        }
        
      return score;  
}   
    
    
    public  int getid(String s)
    {
       
     int domainid=0;
     
       String sl="select * from tbl_domain where domainname='"+s+"' ";
       
        ResultSet rs=db.select(sl);
        try {
            while (rs.next()) {
                
           
             domainid=   rs.getInt("id");

            }
        } catch (SQLException ex) {
            Logger.getLogger(SentimentJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } 
        return domainid;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(sentanceSum.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(sentanceSum.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(sentanceSum.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(sentanceSum.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new sentanceSum().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_cancel;
    private javax.swing.JButton bt_submit;
    private javax.swing.JComboBox combo_domain;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txt_sentence;
    // End of variables declaration//GEN-END:variables
}
